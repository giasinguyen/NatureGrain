import React, { useState, useEffect, useCallback, useMemo, memo } from 'react';
import {
  ChartBarIcon,
  ArrowTrendingUpIcon,
  ArrowTrendingDownIcon,
  CurrencyDollarIcon,
  UserGroupIcon,
  ShoppingCartIcon,
  EyeIcon,
  CalendarDaysIcon,
  ArrowPathIcon,
  SunIcon,
  MoonIcon,
  FunnelIcon,
  ArrowDownTrayIcon,
  MagnifyingGlassIcon,
  ChartPieIcon,
  PresentationChartLineIcon
} from '@heroicons/react/24/outline';
import { Line, Bar, Pie, Doughnut } from 'react-chartjs-2';
import {
  Chart as ChartJS,
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
  Filler
} from 'chart.js';
import { advancedAnalyticsService } from '../../services/advancedAnalytics';

// Register Chart.js components
ChartJS.register(
  CategoryScale,
  LinearScale,
  PointElement,
  LineElement,
  BarElement,
  Title,
  Tooltip,
  Legend,
  ArcElement,
  Filler
);

// Modern color schemes
const COLORS = {
  primary: {
    50: '#f0fdf4',
    100: '#dcfce7',
    500: '#22c55e',
    600: '#16a34a',
    700: '#15803d',
    900: '#14532d'
  },
  secondary: {
    50: '#eff6ff',
    100: '#dbeafe',
    500: '#3b82f6',
    600: '#2563eb',
    700: '#1d4ed8'
  },
  accent: {
    50: '#fefce8',
    100: '#fef3c7',
    500: '#f59e0b',
    600: '#d97706',
    700: '#b45309'
  },
  danger: {
    50: '#fef2f2',
    100: '#fee2e2',
    500: '#ef4444',
    600: '#dc2626',
    700: '#b91c1c'
  }
};

// Utility functions
const formatCurrency = (amount) => {
  if (!amount && amount !== 0) return '0 ₫';
  return new Intl.NumberFormat('vi-VN', { 
    style: 'currency', 
    currency: 'VND',
    minimumFractionDigits: 0
  }).format(amount);
};

const formatNumber = (num) => {
  if (!num && num !== 0) return '0';
  if (num < 1000) return num.toString();
  if (num < 1000000) return (num / 1000).toFixed(1) + 'K';
  if (num < 1000000000) return (num / 1000000).toFixed(1) + 'M';
  return (num / 1000000000).toFixed(1) + 'B';
};

// Modern Metric Card Component
const ModernMetricCard = memo(({ 
  title, 
  value, 
  change, 
  icon: IconComponent, 
  colorScheme = 'primary',
  formatType = 'number',
  subtitle,
  loading = false
}) => {
  const formatValue = (val) => {
    if (loading) return '...';
    switch (formatType) {
      case 'currency': return formatCurrency(val);
      case 'percentage': return val + '%';
      default: return formatNumber(val);
    }
  };
  const isPositive = change?.isPositive !== false;

  return (
    <div className="bg-white dark:bg-gray-800 rounded-2xl shadow-sm border border-gray-200 dark:border-gray-700 p-6 hover:shadow-lg transition-all duration-300 hover:-translate-y-1">
      <div className="flex items-center justify-between mb-4">        <div className={`p-3 rounded-xl bg-gradient-to-br from-${colorScheme}-50 to-${colorScheme}-100 dark:from-${colorScheme}-900/20 dark:to-${colorScheme}-800/20`}>
          <IconComponent className={`h-6 w-6 text-${colorScheme}-600 dark:text-${colorScheme}-400`} />
        </div>
        {change && (
          <div className={`flex items-center space-x-1 px-2 py-1 rounded-full text-xs font-medium ${
            isPositive 
              ? 'bg-green-50 text-green-700 dark:bg-green-900/20 dark:text-green-400' 
              : 'bg-red-50 text-red-700 dark:bg-red-900/20 dark:text-red-400'
          }`}>
            {isPositive ? (
              <ArrowTrendingUpIcon className="h-3 w-3" />
            ) : (
              <ArrowTrendingDownIcon className="h-3 w-3" />
            )}
            <span>{change.change}%</span>
          </div>
        )}
      </div>
      
      <div>
        <h3 className="text-sm font-medium text-gray-600 dark:text-gray-400 mb-1">{title}</h3>
        <p className="text-2xl font-bold text-gray-900 dark:text-gray-100 mb-1">
          {formatValue(value)}
        </p>
        {subtitle && (
          <p className="text-xs text-gray-500 dark:text-gray-400">{subtitle}</p>
        )}
      </div>
    </div>
  );
});

ModernMetricCard.displayName = 'ModernMetricCard';

// Chart Options with enhanced interactivity
const getChartOptions = (title, isDark = false) => ({
  responsive: true,
  maintainAspectRatio: false,
  interaction: {
    mode: 'index',
    intersect: false,
  },
  animation: {
    duration: 1000,
    easing: 'easeInOutQuart'
  },
  plugins: {
    legend: {
      position: 'top',
      labels: {
        color: isDark ? '#d1d5db' : '#374151',
        usePointStyle: true,
        padding: 20,
        font: {
          size: 12,
          weight: 'medium'
        }
      }
    },
    title: {
      display: true,
      text: title,
      color: isDark ? '#f9fafb' : '#111827',
      font: {
        size: 16,
        weight: 'bold'
      },
      padding: {
        top: 10,
        bottom: 30
      }
    },
    tooltip: {
      backgroundColor: isDark ? '#1f2937' : '#ffffff',
      titleColor: isDark ? '#f9fafb' : '#111827',
      bodyColor: isDark ? '#d1d5db' : '#374151',
      borderColor: isDark ? '#374151' : '#e5e7eb',
      borderWidth: 1,
      cornerRadius: 8,
      displayColors: true,
      padding: 12,
      titleFont: {
        size: 14,
        weight: 'bold'
      },
      bodyFont: {
        size: 13
      },
      callbacks: {
        label: function(context) {
          const label = context.dataset.label || '';
          const value = typeof context.parsed.y !== 'undefined' ? 
            formatCurrency(context.parsed.y) : formatNumber(context.parsed);
          return `${label}: ${value}`;
        }
      }
    }
  },
  scales: {
    x: {
      grid: {
        color: isDark ? '#374151' : '#f3f4f6',
        borderColor: isDark ? '#4b5563' : '#d1d5db'
      },
      ticks: {
        color: isDark ? '#d1d5db' : '#6b7280',
        font: {
          size: 11
        }
      }
    },
    y: {
      grid: {
        color: isDark ? '#374151' : '#f3f4f6',
        borderColor: isDark ? '#4b5563' : '#d1d5db'
      },
      ticks: {
        color: isDark ? '#d1d5db' : '#6b7280',
        font: {
          size: 11
        },
        callback: function(value) {
          return formatCurrency(value);
        }
      }
    }
  },
  // Add zoom and pan functionality
  zoom: {
    zoom: {
      wheel: {
        enabled: true,
      },
      pinch: {
        enabled: true
      },
      mode: 'x',
    },
    pan: {
      enabled: true,
      mode: 'x',
    }
  }
});

const ModernAnalytics = memo(() => {
  const [data, setData] = useState(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [timeframe, setTimeframe] = useState('month');
  const [darkMode, setDarkMode] = useState(() => {
    return localStorage.getItem('analytics-dark-mode') === 'true';
  });
  const [showFilters, setShowFilters] = useState(false);
  const [dateRange, setDateRange] = useState({
    start: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],
    end: new Date().toISOString().split('T')[0]
  });  // Add real-time data state
  const [realTimeMetrics, setRealTimeMetrics] = useState({
    onlineUsers: 0,
    activeOrders: 0,
    recentSales: 0,
    conversionRate: 0
  });
  const [isLiveMode, setIsLiveMode] = useState(true);
  const [lastUpdate, setLastUpdate] = useState(new Date());
  
  // Apply dark mode to document
  useEffect(() => {
    if (darkMode) {
      document.documentElement.classList.add('dark');
    } else {
      document.documentElement.classList.remove('dark');
    }
    localStorage.setItem('analytics-dark-mode', darkMode.toString());
  }, [darkMode]);
  // Fetch analytics data
  const fetchData = useCallback(async () => {
    setLoading(true);
    setError(null);
    try {      // Use real backend endpoints from analyticsService
      const [
        salesTrends,
        userGrowth,
        productPerformance,
        orderStatus,
        customerRetention
      ] = await Promise.all([
        import('../../services/api').then(({ analyticsService }) => 
          analyticsService.getSalesTrends(timeframe === 'week' ? 'daily' : timeframe === 'month' ? 'weekly' : 'monthly', 
                                          timeframe === 'week' ? 7 : timeframe === 'month' ? 30 : 365)),
        import('../../services/api').then(({ analyticsService }) => 
          analyticsService.getUserGrowth(timeframe === 'week' ? 7 : timeframe === 'month' ? 30 : 365)),
        import('../../services/api').then(({ analyticsService }) => 
          analyticsService.getProductPerformance()),
        import('../../services/api').then(({ analyticsService }) => 
          analyticsService.getOrderStatusDistribution()),
        import('../../services/api').then(({ analyticsService }) => 
          analyticsService.getCustomerRetention())
      ]);

      // Transform backend data to component format
      const transformedData = {
        revenue: {
          current: salesTrends?.data?.reduce((sum, item) => sum + (item.sales || 0), 0) || 0,
          previous: salesTrends?.summary?.previousPeriodTotal || 0,
          trend: salesTrends?.data?.map(item => ({
            date: item.period,
            value: item.sales || 0
          })) || [],
          growth: salesTrends?.summary?.growthRate || 0
        },
        users: {
          current: userGrowth?.reduce((sum, item) => sum + item.totalUsers, 0) || 0,
          newUsers: userGrowth?.reduce((sum, item) => sum + item.newUsers, 0) || 0,
          previous: Math.floor((userGrowth?.reduce((sum, item) => sum + item.totalUsers, 0) || 0) * 0.85),
          growth: customerRetention?.summary?.customerGrowthRate || 5.2
        },
        orders: {
          current: orderStatus?.reduce((sum, item) => sum + (item.count || 0), 0) || 0,
          previous: Math.floor((orderStatus?.reduce((sum, item) => sum + (item.count || 0), 0) || 0) * 0.9),
          completed: orderStatus?.find(item => item.status === 'COMPLETED')?.count || 0,
          pending: orderStatus?.find(item => item.status === 'PENDING')?.count || 0,
          cancelled: orderStatus?.find(item => item.status === 'CANCELLED')?.count || 0
        },
        products: {
          total: productPerformance?.length || 0,
          topSelling: productPerformance?.slice(0, 5) || []
        },
        traffic: {
          uniqueVisitors: Math.floor(1200 + Math.random() * 400), // Mock data as backend doesn't have this
          pageViews: Math.floor(5000 + Math.random() * 2000),
          bounceRate: (35 + Math.random() * 15).toFixed(1)
        },
        summary: {
          conversionRate: ((orderStatus?.reduce((sum, item) => sum + (item.count || 0), 0) || 0) / 1200 * 100).toFixed(2),
          avgOrderValue: salesTrends?.summary?.avgOrderValue || 0,
          customerAcquisitionRate: customerRetention?.summary?.newCustomerRate || '0.0'
        }
      };

      setData(transformedData);
    } catch (err) {
      setError('Không thể tải dữ liệu phân tích. Sử dụng dữ liệu dự phòng.');
      console.error('Analytics fetch error:', err);
      
      // Fallback to mock data
      const fallbackData = await advancedAnalyticsService.getDashboardAnalytics(timeframe);
      setData(fallbackData);
    } finally {
      setLoading(false);
    }
  }, [timeframe]);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  // Auto refresh every 5 minutes
  useEffect(() => {
    const interval = setInterval(fetchData, 5 * 60 * 1000);
    return () => clearInterval(interval);
  }, [fetchData]);
  // Real-time metrics fetching
  const fetchRealTimeMetrics = useCallback(async () => {
    if (!isLiveMode) return;
    
    try {
      const { dashboardService } = await import('../../services/api');
      const metrics = await dashboardService.getRealtimeMetrics();
      
      setRealTimeMetrics({
        onlineUsers: Math.floor(45 + Math.random() * 25), // Mock as backend doesn't have this
        activeOrders: metrics.activeOrders || Math.floor(12 + Math.random() * 8),
        recentSales: metrics.recentSales || Math.floor(150000 + Math.random() * 50000),
        conversionRate: metrics.conversionRate || (2.5 + Math.random() * 1.5)
      });
      
      setLastUpdate(new Date());
    } catch (err) {
      console.error('Real-time metrics fetch error:', err);
      // Fallback to mock data
      setRealTimeMetrics({
        onlineUsers: Math.floor(45 + Math.random() * 25),
        activeOrders: Math.floor(12 + Math.random() * 8),
        recentSales: Math.floor(150000 + Math.random() * 50000),
        conversionRate: (2.5 + Math.random() * 1.5)
      });
    }
  }, [isLiveMode]);

  // Real-time data effect
  useEffect(() => {
    fetchRealTimeMetrics(); // Initial fetch
    
    const interval = setInterval(() => {
      fetchRealTimeMetrics();
    }, 30000); // Update every 30 seconds
    
    return () => clearInterval(interval);
  }, [fetchRealTimeMetrics]);
        activeOrders: metrics?.activeOrders || Math.floor(8 + Math.random() * 6),
        recentSales: metrics?.recentSales || Math.floor(250000 + Math.random() * 150000),
        conversionRate: metrics?.conversionRate || (2.5 + Math.random() * 1.5).toFixed(2)
      });
    } catch (error) {
      console.error('Error fetching real-time metrics:', error);
      // Use mock data on error
      setRealTimeMetrics({
        onlineUsers: Math.floor(45 + Math.random() * 25),
        activeOrders: Math.floor(8 + Math.random() * 6),
        recentSales: Math.floor(250000 + Math.random() * 150000),
        conversionRate: (2.5 + Math.random() * 1.5).toFixed(2)
      });
    }
  }, [isLiveMode]);

  // Real-time updates every 30 seconds
  useEffect(() => {
    if (isLiveMode) {
      fetchRealTimeMetrics();
      const realTimeInterval = setInterval(fetchRealTimeMetrics, 30000);
      return () => clearInterval(realTimeInterval);
    }
  }, [fetchRealTimeMetrics, isLiveMode]);

  // Chart data preparation
  const chartData = useMemo(() => {
    if (!data) return null;

    const revenueChartData = {
      labels: data.revenue.trend.map(item => {
        const date = new Date(item.date);
        return timeframe === 'week' 
          ? date.toLocaleDateString('vi-VN', { weekday: 'short' })
          : timeframe === 'month'
          ? date.toLocaleDateString('vi-VN', { day: 'numeric', month: 'short' })
          : date.toLocaleDateString('vi-VN', { month: 'short', year: 'numeric' });
      }),
      datasets: [
        {
          label: 'Doanh thu',
          data: data.revenue.trend.map(item => item.value),
          borderColor: COLORS.primary[500],
          backgroundColor: `${COLORS.primary[500]}20`,
          borderWidth: 3,
          fill: true,
          tension: 0.4,
          pointBackgroundColor: COLORS.primary[600],
          pointBorderColor: '#ffffff',
          pointBorderWidth: 2,
          pointRadius: 6,
          pointHoverRadius: 8
        }
      ]
    };

    const ordersBarData = {
      labels: ['Đã hoàn thành', 'Đang xử lý', 'Đã hủy', 'Chờ thanh toán'],
      datasets: [
        {
          label: 'Số đơn hàng',
          data: [
            data.orders.completed,
            data.orders.pending,
            data.orders.cancelled || 0,
            data.orders.awaitingPayment || 0
          ],
          backgroundColor: [
            COLORS.primary[500],
            COLORS.secondary[500],
            COLORS.danger[500],
            COLORS.accent[500]
          ],
          borderRadius: 8,
          borderSkipped: false
        }
      ]
    };

    const usersPieData = {
      labels: ['Khách hàng mới', 'Khách hàng cũ', 'Khách VIP'],
      datasets: [
        {
          data: [
            data.users.newUsers,
            data.users.current - data.users.newUsers,
            Math.floor(data.users.current * 0.1)
          ],
          backgroundColor: [
            COLORS.primary[500],
            COLORS.secondary[500],
            COLORS.accent[500]
          ],
          borderWidth: 0,
          hoverBorderWidth: 2,
          hoverBorderColor: '#ffffff'
        }
      ]
    };

    return { revenueChartData, ordersBarData, usersPieData };
  }, [data, timeframe]);

  // Export data function
  const exportData = useCallback(() => {
    if (!data) return;
    
    const exportData = {
      timeframe,
      dateRange,
      metrics: {
        revenue: data.revenue.current,
        users: data.users.current,
        orders: data.orders.current,
        conversionRate: ((data.orders.current / data.traffic.uniqueVisitors) * 100).toFixed(2)
      },
      exportedAt: new Date().toISOString()
    };

    const dataStr = JSON.stringify(exportData, null, 2);
    const dataBlob = new Blob([dataStr], { type: 'application/json' });
    const url = URL.createObjectURL(dataBlob);
    const link = document.createElement('a');
    link.href = url;
    link.download = `analytics-${timeframe}-${new Date().toISOString().split('T')[0]}.json`;
    link.click();
    URL.revokeObjectURL(url);
  }, [data, timeframe, dateRange]);

  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900 p-6">
        <div className="max-w-7xl mx-auto">
          <div className="bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-xl p-6 text-center">
            <div className="text-red-600 dark:text-red-400 text-lg font-medium mb-2">
              Lỗi tải dữ liệu
            </div>
            <p className="text-red-500 dark:text-red-300 mb-4">{error}</p>
            <button
              onClick={fetchData}
              className="px-4 py-2 bg-red-600 text-white rounded-lg hover:bg-red-700 transition-colors"
            >
              Thử lại
            </button>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900 transition-colors duration-300">
      <div className="max-w-7xl mx-auto p-6 space-y-6">
        {/* Header */}
        <div className="flex flex-col lg:flex-row justify-between items-start lg:items-center gap-4">
          <div>
            <h1 className="text-3xl font-bold text-gray-900 dark:text-gray-100 mb-2 flex items-center">
              <PresentationChartLineIcon className="h-8 w-8 mr-3 text-green-600 dark:text-green-400" />
              Phân tích hiện đại
            </h1>
            <p className="text-gray-600 dark:text-gray-400">
              Thông tin chi tiết và trực quan về hiệu suất kinh doanh
            </p>
          </div>
          
          <div className="flex items-center space-x-3">
            {/* Dark mode toggle */}
            <button
              onClick={() => setDarkMode(!darkMode)}
              className="p-2 rounded-lg bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
            >
              {darkMode ? (
                <SunIcon className="h-5 w-5 text-gray-600 dark:text-gray-400" />
              ) : (
                <MoonIcon className="h-5 w-5 text-gray-600 dark:text-gray-400" />
              )}
            </button>

            {/* Filters toggle */}
            <button
              onClick={() => setShowFilters(!showFilters)}
              className="flex items-center space-x-2 px-4 py-2 rounded-lg bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
            >
              <FunnelIcon className="h-4 w-4" />
              <span className="text-sm font-medium">Bộ lọc</span>
            </button>

            {/* Export button */}
            <button
              onClick={exportData}
              disabled={!data}
              className="flex items-center space-x-2 px-4 py-2 rounded-lg bg-green-600 text-white hover:bg-green-700 disabled:bg-gray-400 transition-colors"
            >
              <ArrowDownTrayIcon className="h-4 w-4" />
              <span className="text-sm font-medium">Xuất dữ liệu</span>
            </button>

            {/* Refresh button */}
            <button
              onClick={fetchData}
              disabled={loading}
              className="p-2 rounded-lg bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 hover:bg-gray-50 dark:hover:bg-gray-700 transition-colors"
            >
              <ArrowPathIcon className={`h-5 w-5 text-gray-600 dark:text-gray-400 ${loading ? 'animate-spin' : ''}`} />
            </button>
          </div>
        </div>

        {/* Filters Panel */}
        {showFilters && (
          <div className="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-6 space-y-4">
            <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4">
              Bộ lọc dữ liệu
            </h3>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              {/* Timeframe selector */}
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Khoảng thời gian
                </label>
                <select
                  value={timeframe}
                  onChange={(e) => setTimeframe(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-green-500 focus:border-green-500"
                >
                  <option value="week">7 ngày qua</option>
                  <option value="month">30 ngày qua</option>
                  <option value="year">12 tháng qua</option>
                </select>
              </div>

              {/* Date range */}
              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Từ ngày
                </label>
                <input
                  type="date"
                  value={dateRange.start}
                  onChange={(e) => setDateRange(prev => ({ ...prev, start: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-green-500 focus:border-green-500"
                />
              </div>

              <div>
                <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
                  Đến ngày
                </label>
                <input
                  type="date"
                  value={dateRange.end}
                  onChange={(e) => setDateRange(prev => ({ ...prev, end: e.target.value }))}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100 focus:ring-2 focus:ring-green-500 focus:border-green-500"
                />
              </div>
            </div>
          </div>
        )}

        {/* Metrics Cards */}
        {data && (
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">
            <ModernMetricCard
              title="Tổng doanh thu"
              value={data.revenue.current}
              change={{
                change: Math.abs(((data.revenue.current - data.revenue.previous) / data.revenue.previous) * 100).toFixed(1),
                isPositive: data.revenue.current >= data.revenue.previous
              }}
              icon={CurrencyDollarIcon}
              colorScheme="primary"
              formatType="currency"
              subtitle={`So với kỳ trước: ${formatCurrency(data.revenue.previous)}`}
              loading={loading}
            />

            <ModernMetricCard
              title="Tổng người dùng"
              value={data.users.current}
              change={{
                change: Math.abs(((data.users.current - data.users.previous) / data.users.previous) * 100).toFixed(1),
                isPositive: data.users.current >= data.users.previous
              }}
              icon={UserGroupIcon}
              colorScheme="secondary"
              formatType="number"
              subtitle={`Mới: ${data.users.newUsers} | Hoạt động: ${data.users.activeUsers}`}
              loading={loading}
            />

            <ModernMetricCard
              title="Tổng đơn hàng"
              value={data.orders.current}
              change={{
                change: Math.abs(((data.orders.current - data.orders.previous) / data.orders.previous) * 100).toFixed(1),
                isPositive: data.orders.current >= data.orders.previous
              }}
              icon={ShoppingCartIcon}
              colorScheme="accent"
              formatType="number"
              subtitle={`Hoàn thành: ${data.orders.completed} | Chờ: ${data.orders.pending}`}
              loading={loading}
            />

            <ModernMetricCard
              title="Tỷ lệ chuyển đổi"
              value={((data.orders.current / data.traffic.uniqueVisitors) * 100).toFixed(2)}
              icon={EyeIcon}
              colorScheme="danger"
              formatType="percentage"
              subtitle={`Lượt xem: ${formatNumber(data.traffic.pageViews)}`}
              loading={loading}
            />
          </div>
        )}

        {/* Charts Section */}
        {data && chartData && (
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            {/* Revenue Trend Chart */}
            <div className="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-6">
              <div className="h-80">
                <Line 
                  data={chartData.revenueChartData} 
                  options={getChartOptions('Xu hướng doanh thu', darkMode)}
                />
              </div>
            </div>

            {/* Orders Status Chart */}
            <div className="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-6">
              <div className="h-80">
                <Bar 
                  data={chartData.ordersBarData} 
                  options={{
                    ...getChartOptions('Trạng thái đơn hàng', darkMode),
                    scales: {
                      y: {
                        grid: {
                          color: darkMode ? '#374151' : '#f3f4f6',
                        },
                        ticks: {
                          color: darkMode ? '#d1d5db' : '#6b7280'
                        }
                      },
                      x: {
                        grid: {
                          display: false
                        },
                        ticks: {
                          color: darkMode ? '#d1d5db' : '#6b7280'
                        }
                      }
                    }
                  }}
                />
              </div>
            </div>

            {/* Users Distribution Chart */}
            <div className="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-6">
              <div className="h-80">
                <Doughnut 
                  data={chartData.usersPieData} 
                  options={{
                    ...getChartOptions('Phân loại người dùng', darkMode),
                    scales: undefined,
                    maintainAspectRatio: false,
                    plugins: {
                      ...getChartOptions('Phân loại người dùng', darkMode).plugins,
                      legend: {
                        position: 'bottom',
                        labels: {
                          color: darkMode ? '#d1d5db' : '#374151',
                          usePointStyle: true,
                          padding: 20
                        }
                      }
                    }
                  }}
                />
              </div>
            </div>

            {/* Top Products */}
            <div className="bg-white dark:bg-gray-800 rounded-xl border border-gray-200 dark:border-gray-700 p-6">
              <h3 className="text-lg font-semibold text-gray-900 dark:text-gray-100 mb-4">
                Sản phẩm bán chạy
              </h3>
              
              <div className="space-y-4">
                {data.products.topSelling.slice(0, 5).map((product, index) => (
                  <div key={index} className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors">
                    <div className="flex-1">
                      <p className="text-sm font-medium text-gray-900 dark:text-gray-100 truncate">
                        {product.name}
                      </p>
                      <p className="text-xs text-gray-500 dark:text-gray-400">
                        {product.units} đơn vị
                      </p>
                    </div>
                    <div className="text-right ml-3">
                      <p className="text-sm font-semibold text-gray-900 dark:text-gray-100">
                        {formatCurrency(product.sales)}
                      </p>
                      <p className="text-xs text-green-600 dark:text-green-400">
                        +{product.growth}%
                      </p>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        {/* Real-time Metrics Bar */}
        {isLiveMode && (
          <div className="bg-gradient-to-r from-green-500 to-green-600 dark:from-green-600 dark:to-green-700 rounded-xl p-4 text-white">
            <div className="flex items-center justify-between mb-3">
              <div className="flex items-center space-x-2">
                <div className="w-3 h-3 bg-white rounded-full animate-pulse"></div>
                <span className="text-sm font-medium">Trực tiếp</span>
                <span className="text-xs opacity-80">Cập nhật mỗi 30 giây</span>
              </div>
              <button
                onClick={() => setIsLiveMode(!isLiveMode)}
                className="text-xs px-3 py-1 bg-white/20 hover:bg-white/30 rounded-full transition-colors"
              >
                {isLiveMode ? 'Tắt trực tiếp' : 'Bật trực tiếp'}
              </button>
            </div>
            <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-center">
              <div>
                <div className="text-2xl font-bold">{realTimeMetrics.onlineUsers}</div>
                <div className="text-xs opacity-80">Người dùng trực tuyến</div>
              </div>
              <div>
                <div className="text-2xl font-bold">{realTimeMetrics.activeOrders}</div>
                <div className="text-xs opacity-80">Đơn hàng đang xử lý</div>
              </div>
              <div>
                <div className="text-2xl font-bold">{formatCurrency(realTimeMetrics.recentSales)}</div>
                <div className="text-xs opacity-80">Doanh số gần đây</div>
              </div>
              <div>
                <div className="text-2xl font-bold">{realTimeMetrics.conversionRate}%</div>
                <div className="text-xs opacity-80">Tỷ lệ chuyển đổi</div>
              </div>
            </div>
          </div>
        )}

        {/* Loading State */}
        {loading && (
          <div className="fixed inset-0 bg-black/20 flex items-center justify-center z-50">
            <div className="bg-white dark:bg-gray-800 rounded-xl p-6 shadow-xl">
              <div className="flex items-center space-x-3">
                <ArrowPathIcon className="h-6 w-6 animate-spin text-green-600" />
                <span className="text-gray-900 dark:text-gray-100 font-medium">
                  Đang tải dữ liệu...
                </span>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
});

ModernAnalytics.displayName = 'ModernAnalytics';

export default ModernAnalytics;
